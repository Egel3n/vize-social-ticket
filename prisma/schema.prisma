// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  creationDate     DateTime           @default(now())
  username         String             @unique
  password         String
  name             String
  lastName         String
  profilePicture   String
  active           Boolean            @default(true)
  BigEventAtendees BigEventAtendees[]
  BigEventLikes    BigEventLikes[]
  BigEventComments BigEventComments[]
  Ticket           Ticket[]
  Post             Post[]
  PostComments     PostComments[]
  PostLikes        PostLikes[]

  SmallEvent SmallEvent[]
  Friend1    Friend[]     @relation("firstFriend")
  Friend2    Friend[]     @relation("secondFriend")
}

enum VerifiedStatus {
  Verified
  Pending
}

model Organization {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  organizationName String         @unique
  status           VerifiedStatus @default(Pending)
  profilePicture   String
  document         String
  password         String
  BigEvent         BigEvent[]
}

enum EventType {
  Concert
  Theater
  Festival
  Standp
  Kids
  Other
}

model BigEvent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Int
  quota        Int
  eventDate    DateTime
  country      String
  city         String
  district     String
  place        String
  picture      String
  isActive     Boolean  @default(true)
  creationDate DateTime @default(now())
  type         EventType
  text    String 

  OrganizationID   String             @db.ObjectId
  Organization     Organization       @relation(fields: [OrganizationID], references: [id])
  BigEventAtendees BigEventAtendees[]
  BigEventLikes    BigEventLikes[]
  BigEventComments BigEventComments[]
  Ticket           Ticket[]
}

model BigEventLikes {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creationDate DateTime @default(now())

  user       User     @relation(fields: [userID], references: [id])
  userID     String   @db.ObjectId
  bigEvent   BigEvent @relation(fields: [bigEventID], references: [id])
  bigEventID String   @db.ObjectId
}

model BigEventComments {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  commentBody  String
  creationDate DateTime @default(now())

  user       User     @relation(fields: [userID], references: [id])
  userID     String   @db.ObjectId
  bigEvent   BigEvent @relation(fields: [bigEventID], references: [id])
  bigEventID String   @db.ObjectId
}

model BigEventAtendees {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creationDate DateTime @default(now())

  user       User     @relation(fields: [userID], references: [id])
  userID     String   @db.ObjectId
  bigEvent   BigEvent @relation(fields: [bigEventID], references: [id])
  bigEventID String   @db.ObjectId
}

model Ticket {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  price        Int
  isRefunded   Boolean  @default(false) 
  
  creationDate DateTime @default(now())
  user       User     @relation(fields: [userID], references: [id])
  userID     String   @db.ObjectId
  bigEvent   BigEvent @relation(fields: [bigEventID], references: [id])
  bigEventID String   @db.ObjectId

   @@unique([userID,bigEventID])
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  Photo        String
  Text         String
  creationDate DateTime @default(now())

  user         User           @relation(fields: [userID], references: [id])
  userID       String         @db.ObjectId
  PostComments PostComments[]
  PostLikes    PostLikes[]
}

model PostComments {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  comment      String
  creationDate DateTime @default(now())

  post    Post   @relation(fields: [postID], references: [id])
  postID  String @db.ObjectId
  owner   User   @relation(fields: [ownerID], references: [id])
  ownerID String @db.ObjectId
}

model PostLikes {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  creationDate DateTime @default(now())

  post    Post   @relation(fields: [postID], references: [id])
  postID  String @db.ObjectId
  owner   User   @relation(fields: [ownerID], references: [id])
  ownerID String @db.ObjectId
}



model SmallEvent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  location     Json
  quoata       Int
  eventDate    DateTime
  creationDate DateTime @default(now())
  name         String
  isActive     Boolean @default(true)

  owner   User   @relation(fields: [ownerID], references: [id])
  ownerID String @db.ObjectId
}

enum FriendshipStatus {
  Accepted
  Rejected
  Pending
  Removed
}

model Friend {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  creationDate  DateTime @default(now())

  userFirst    User   @relation("firstFriend", fields: [userFirstID], references: [id])
  userFirstID  String @db.ObjectId
  userSecond   User   @relation("secondFriend", fields: [userSecondID], references: [id])
  userSecondID String @db.ObjectId
  status FriendshipStatus @default(Pending)
  @@unique([userFirstID,userSecondID])

}
